{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOUW1a5/qG0wOp4/W83m3BA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"PltHNRvtZpGD","executionInfo":{"status":"ok","timestamp":1714962540595,"user_tz":-540,"elapsed":5,"user":{"displayName":"Dhanuka Karunasena","userId":"10683769247427198514"}},"outputId":"31fc2150-c348-41c0-de15-0922ab93009c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'highlights features that distinguish one item from another.\\nInformation needed is then much less since train on the highlighted features.'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":1}],"source":["# Converlution is filtering the image\n","\"\"\"highlights features that distinguish one item from another.\n","Information needed is then much less since train on the highlighted features.\"\"\"\n","\n","# Max pooling is compressing the image"]},{"cell_type":"code","source":["import tensorflow as tf\n","\n","fmnist = tf.keras.datasets.fashion_mnist\n","(training_img, training_lbl), (testing_img, testing_lbl) = fmnist.load_data()\n","\n","training_images = training_img / 255.0\n","testing_images = testing_img / 255.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"deFdkf9Hwqws","executionInfo":{"status":"ok","timestamp":1714963173201,"user_tz":-540,"elapsed":1035,"user":{"displayName":"Dhanuka Karunasena","userId":"10683769247427198514"}},"outputId":"75cdd598-3cf9-4ba6-8c8b-1e3c213308c3"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","29515/29515 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","26421880/26421880 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","5148/5148 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","4422102/4422102 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["# Define the model\n","# tf.keras.layers.Conv2d(numberOfFilters, dimensionOfaFilter, activationFunc, input_shape)\n","\n","\n","model = tf.keras.models.Sequential([\n","    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28, 1)),\n","    tf.keras.layers.MaxPooling2D(2, 2),\n","    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n","    tf.keras.layers.MaxPooling2D(2,2),\n","\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.Dense(128, activation='relu'),\n","    tf.keras.layers.Dense(10, activation='softmax')\n","])\n","\n","model.summary()\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","model.fit(training_images, training_lbl, epochs=5, verbose=0)\n","\n","test_loss = model.evaluate(testing_images, testing_lbl)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FgQHZC9Xu3eU","executionInfo":{"status":"ok","timestamp":1714963594696,"user_tz":-540,"elapsed":206424,"user":{"displayName":"Dhanuka Karunasena","userId":"10683769247427198514"}},"outputId":"b55cad2a-8cb3-42d9-a8c2-6d150941e1a1"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d_6 (Conv2D)           (None, 26, 26, 32)        320       \n","                                                                 \n"," max_pooling2d_6 (MaxPoolin  (None, 13, 13, 32)        0         \n"," g2D)                                                            \n","                                                                 \n"," conv2d_7 (Conv2D)           (None, 11, 11, 32)        9248      \n","                                                                 \n"," max_pooling2d_7 (MaxPoolin  (None, 5, 5, 32)          0         \n"," g2D)                                                            \n","                                                                 \n"," flatten_3 (Flatten)         (None, 800)               0         \n","                                                                 \n"," dense_6 (Dense)             (None, 128)               102528    \n","                                                                 \n"," dense_7 (Dense)             (None, 10)                1290      \n","                                                                 \n","=================================================================\n","Total params: 113386 (442.91 KB)\n","Trainable params: 113386 (442.91 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n","313/313 [==============================] - 2s 6ms/step - loss: 0.2870 - accuracy: 0.8973\n"]}]},{"cell_type":"code","source":["# Conv2D layer parameters are:\n","\n","# The number of convolutions you want to generate. The value here is purely arbitrary but it's good to use powers of 2 starting from 32.\n","# The size of the Convolution. In this case, a 3x3 grid.\n","# The activation function to use. In this case, you used a ReLU, which you might recall is the equivalent of returning x when x>0, else return 0.\n","# In the first layer, the shape of the input data."],"metadata":{"id":"22Xs8B6YwL88"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# OVERFITTING\n","\n","# the validation results may actually go down, due to something called overfitting."],"metadata":{"id":"WNVukMLcy0DS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Visualizing the Convolutions and Pooling\n","\n","print(testing_lbl[:100])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r6GOpEebzFqQ","executionInfo":{"status":"ok","timestamp":1714963748856,"user_tz":-540,"elapsed":301,"user":{"displayName":"Dhanuka Karunasena","userId":"10683769247427198514"}},"outputId":"55409d56-6914-40f0-816a-ef438d6d5155"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[9 2 1 1 6 1 4 6 5 7 4 5 7 3 4 1 2 4 8 0 2 5 7 9 1 4 6 0 9 3 8 8 3 3 8 0 7\n"," 5 7 9 6 1 3 7 6 7 2 1 2 2 4 4 5 8 2 2 8 4 8 0 7 7 8 5 1 1 2 3 9 8 7 0 2 6\n"," 2 3 1 2 8 4 1 8 5 9 5 0 3 2 0 6 5 3 6 7 1 8 0 1 4 2]\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from tensorflow.keras import models\n","\n","f, axarr = plt.subplots(3,4)\n","\n","FIRST_IMAGE=0\n","SECOND_IMAGE=23\n","THIRD_IMAGE=28\n","CONVOLUTION_NUMBER = 1\n","\n","layer_outputs = [layer.output for layer in model.layers]\n","activation_model = tf.keras.models.Model(inputs = model.input, outputs = layer_outputs)\n","\n","for x in range(0,4):\n","  f1 = activation_model.predict(testing_images[FIRST_IMAGE].reshape(1, 28, 28, 1))[x]\n","  axarr[0,x].imshow(f1[0, : , :, CONVOLUTION_NUMBER], cmap='inferno')\n","  axarr[0,x].grid(False)\n","\n","  f2 = activation_model.predict(testing_images[SECOND_IMAGE].reshape(1, 28, 28, 1))[x]\n","  axarr[1,x].imshow(f2[0, : , :, CONVOLUTION_NUMBER], cmap='inferno')\n","  axarr[1,x].grid(False)\n","\n","  f3 = activation_model.predict(testing_images[THIRD_IMAGE].reshape(1, 28, 28, 1))[x]\n","  axarr[2,x].imshow(f3[0, : , :, CONVOLUTION_NUMBER], cmap='inferno')\n","  axarr[2,x].grid(False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":640},"id":"Qy4Wr48Pzd6v","executionInfo":{"status":"ok","timestamp":1714963822848,"user_tz":-540,"elapsed":3846,"user":{"displayName":"Dhanuka Karunasena","userId":"10683769247427198514"}},"outputId":"51e597a3-b463-4b29-9ec3-99b2b2cb12b5"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 129ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 45ms/step\n","1/1 [==============================] - 0s 42ms/step\n","1/1 [==============================] - 0s 36ms/step\n","1/1 [==============================] - 0s 37ms/step\n","1/1 [==============================] - 0s 33ms/step\n","1/1 [==============================] - 0s 42ms/step\n","1/1 [==============================] - 0s 31ms/step\n","1/1 [==============================] - 0s 35ms/step\n","1/1 [==============================] - 0s 47ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 12 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"T2yh2R-1zo4m"},"execution_count":null,"outputs":[]}]}